local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({
    Name = "My Custom UI", 
    HidePremium = false, 
    SaveConfig = true, 
    ConfigFolder = "OrionTest",
    IntroEnabled = true, 
    IntroText = "Welcome to My Custom UI", 
    IntroIcon = "http://www.example.com/icon.png", -- Replace with your desired image URL
    Icon = "http://www.example.com/window_icon.png", -- Replace with your desired window icon URL
    CloseCallback = function()
        print("Window Closed")
    end
})

-- Creating a "Character" tab
local CharacterTab = Window:MakeTab({
	Name = "Character",
	Icon = "rbxassetid://4483345998", -- Replace with your desired tab icon
	PremiumOnly = false
})

-- Creating a section named "Speed & Jump" in the "Character" tab
local Section = CharacterTab:AddSection({
	Name = "Speed & Jump"
})

-- Adding a speed slider
Section:AddSlider({
	Name = "Speed",
	Min = 0,
	Max = 200,
	Default = 5,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "Speed",
	Callback = function(Value)
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
		print("Speed set to: " .. Value)
	end    
})

-- Adding a jump power slider
Section:AddSlider({
	Name = "Jump",
	Min = 0,
	Max = 100,
	Default = 50,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "JumpPower",
	Callback = function(Value)
		game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
		print("Jump Power set to: " .. Value)
	end    
})

-- Adding a Noclip button
local noclipEnabled = false
local function toggleNoclip()
	noclipEnabled = not noclipEnabled
	if noclipEnabled then
		print("Noclip enabled")
		game:GetService("RunService").Stepped:Connect(function()
			if noclipEnabled then
				for _,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
					if v:IsA("BasePart") then
						v.CanCollide = false
					end
				end
			end
		end)
	else
		print("Noclip disabled")
		for _,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
			if v:IsA("BasePart") then
				v.CanCollide = true
			end
		end
	end
end

Section:AddButton({
	Name = "Noclip",
	Callback = toggleNoclip
})

-- Adding a dropdown for teleporting to players
local players = game.Players:GetPlayers()
local playerNames = {}
for _, player in ipairs(players) do
	table.insert(playerNames, player.Name)
end

local selectedPlayer = nil

Section:AddDropdown({
	Name = "TP to Player",
	Default = playerNames[1],
	Options = playerNames,
	Callback = function(Value)
		selectedPlayer = Value
		print("Selected player: " .. Value)
	end    
})

-- Adding a TP button
Section:AddButton({
	Name = "TP",
	Callback = function()
		if selectedPlayer then
			local targetPlayer = game.Players:FindFirstChild(selectedPlayer)
			if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
				game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(targetPlayer.Character.HumanoidRootPart.CFrame)
				print("Teleported to: " .. selectedPlayer)
			else
				print("Target player not found or not valid.")
			end
		else
			print("No player selected.")
		end
	end
})

-- Adding a View button
local viewing = false

Section:AddButton({
	Name = "View",
	Callback = function()
		if selectedPlayer then
			local targetPlayer = game.Players:FindFirstChild(selectedPlayer)
			if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
				viewing = true
				game.Workspace.CurrentCamera.CameraSubject = targetPlayer.Character.Humanoid
				print("Viewing: " .. selectedPlayer)
			else
				print("Target player not found or not valid.")
			end
		else
			print("No player selected.")
		end
	end
})

-- Adding a Stop All Actions button
Section:AddButton({
	Name = "Stop All Actions",
	Callback = function()
		game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
		viewing = false
		if viewConnection then
			viewConnection:Disconnect()
			viewConnection = nil
		end
		print("Stopped all actions.")
	end
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]
